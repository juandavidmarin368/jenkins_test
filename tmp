package com.vi.pipeline.hybrid

import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException

import static Ref.*
import com.vi.pipeline.vw.Ref as VwRef
import com.vi.pipeline.common.Echo
import com.vi.pipeline.common.Shell
import com.vi.pipeline.common.Security

import groovy.json.JsonSlurperClassic

class AWSApi implements Serializable {
    private def ctx

    private Echo echo
    private Shell shell
    private Security security

    // AWS parameters
    String accessKey
    String secretKey

    // ECR image scan parameters
    private int scanWaitTime = 60   // SECONDS
    private int maxScanStatusCheckAttempts = 10    // number of tries to check if scan status is complete

    /**
    * Creates an AWS object with specified credentials
    * @param accessKey AWS access key
    * @param secretKey AWS secret key
    */
    AWSApi(def ctx, String accessKey, String secretKey) {
        this.ctx = ctx
        this.echo = new Echo(ctx)
        this.shell = new Shell(ctx)
        this.security = new Security(ctx)
        this.accessKey = accessKey
        this.secretKey = secretKey
    }

    /**
     * Initialize container/host with AWS credentials
     * @return Map of a result[exitcode, message]
    */
    Map initialize() {
        def credentialsFile = """\
        [dev]
        aws_access_key_id = ${this.accessKey}
        aws_secret_access_key = ${this.secretKey}
        region = us-east-2

        [terraform]
        aws_access_key_id = ${this.accessKey}
        aws_secret_access_key = ${this.secretKey}
        region = us-east-2
        """.stripIndent().trim()

        def profileFile = """\
        [profile uat]
        region = us-east-2
        role_arn = arn:aws:iam::397111407519:role/uat-VCIO-L2-role
        source_profile = terraform

        [profile app]
        region = us-east-2
        role_arn = arn:aws:iam::270852171095:role/app-VCIO-L2-role
        source_profile = terraform

        [profile app-uk]
        region = eu-west-2
        role_arn = arn:aws:iam::350644321109:role/app-uk-VCIO-L2-role
        source_profile = terraform

        [profile cloudtrail]
        region = us-east-1
        role_arn = arn:aws:iam::530214220233:role/cloudtrail-VCIO-L2-role
        source_profile = terraform

        [profile support]
        region = us-east-1
        role_arn = arn:aws:iam::820021115433:role/support-VCIO-L2-role
        source_profile = terraform

        [profile marketplace]
        region = us-east-1
        role_arn = arn:aws:iam::795601679077:role/marketplace-VCIO-L2-role
        source_profile = terraform

        [profile root]
        region = us-east-1
        role_arn = arn:aws:iam::407724209249:role/root-VCIO-L2-role
        source_profile = terraform

        [profile ww-us]
        region = us-east-1
        role_arn = arn:aws:iam::647724765282:role/ww-us-VCIO-L2-role
        source_profile = terraform

        [profile cmr]
        region = us-east-1
        role_arn = arn:aws:iam::189688312005:role/cmr-VCIO-L2-role
        source_profile = terraform
        """.stripIndent().trim()

        def ghApiToken = security.findCredentialSecret("github-api-token")

        int exitcode = shell.execForStatus("""
            set +x
            git config --global url."https://${ghApiToken}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
            mkdir -p /root/.aws
            touch /root/.aws/credentials
            echo "${credentialsFile}" > /root/.aws/credentials
            echo "${profileFile}" > /root/.aws/config
            set -x
        """)
        return [exitcode: exitcode, message: "AWS access initialization"]
    }

    /**
     * Login to ecr for provided environment
     * @param environment build environment
     * @return Map of a result[exitcode, message]
    */
    Map ecrLogin(String environment) {
        String repository = Ref.REPOSITORIES[environment].repository
        echo.enter "AWSApi::ecrLogin"
        int exitcode = shell.execWithLog("""
            aws ecr --profile ${environment} get-authorization-token \
            --output text --query 'authorizationData[].authorizationToken'|base64 -d|cut -d: -f2|\
            docker login -u AWS ${repository} --password-stdin
        """, "${environment}-ecr-login")
        echo.exit "AWSApi::ecrLogin"
        return [exitcode: exitcode, message: "ECR login to ${repository} for environment: ${environment}"]
    }

    /**
     * Fetch images for service and extract image tags
     * @param environment Build environment
     * @param service ECS service
     * @return List of sorted image tags
    */
    def findEcrImageTags(String environment, String service) {
        echo.enter "AWSApi::findEcrImageTags"
        String stdout = shell.exec("""
            aws --profile ${environment} ecr describe-images --repository-name ${service}
        """)
        def json = new JsonSlurperClassic().parseText(stdout)
        def imageDetails = json['imageDetails']
        def imageTags = []
        String imageTagPrefix = environment
        for(imageDetail in imageDetails) {
            if(imageDetail['imageTags']) {
                for(imageTag in imageDetail['imageTags']) {
                    if(imageTag && imageTag.contains(imageTagPrefix)) {
                        imageTags << imageTag
                    }
                }
            }
        }
        imageTags.sort()
        echo.exit "AWSApi::findEcrImageTags"
        return imageTags
    }

    /**
     * Delete image for the service in the environment provided
     * @param environment Build environment
     * @param service ECS service
     * @param imageTag image tag to be deleted for service
     * @return Map of a result[exitcode, message]
    */
    Map deleteEcrImage(String environment, String service, String imageTag) {
        echo.enter "AWSApi::deleteEcrImage"
        int exitcode = shell.execForStatus("aws --profile ${environment} ecr batch-delete-image --repository-name ${service} --image-ids imageTag=${imageTag}")
        if(exitcode != 0) {
            echo.exit "AWSApi::deleteEcrImage"
            return [exitcode: exitcode, message: "failed to delete ECR image for service ${service} and tag ${imageTag}"]
        }
        echo.exit "AWSApi::deleteEcrImage"
        return [exitcode: exitcode, message: "successfully deleted ECR image for service ${service} and tag ${imageTag}"]
    }

    /**
     * Tag and push built docker image for a service
     * @param environment Build environment
     * @param service ECS service
     * @param tags list of image tags for docker image
     * @return Map of a result[exitcode, message]
    */
    Map tagAndPushEcrImage(String environment, String service, List<String> tags, String defaultTag="latest") {
        echo.enter "AWSApi::tagAndPushEcrImage"
        int exitcode = shell.execForStatus("""
            aws --profile ${environment} ecr describe-repositories --repository-names ${service} || aws --profile ${environment} ecr create-repository --repository-name ${service}
        """)
        if(exitcode != 0) {
            echo.exit "AWSApi::tagAndPushEcrImage"
            return [exitcode: 1, message: "failed to create or verify ${service} repository for ${environment}"]
        }
        String ecrServiceRepository = "${Ref.REPOSITORIES[environment].repository}/${service}"
        for(tag in tags) {
            String taggedImageName = "${ecrServiceRepository}:${tag}"
            exitcode = shell.execForStatus("docker tag ${service}:${defaultTag} ${taggedImageName}")
            if(exitcode != 0) {
                echo.exit "AWSApi::tagAndPushEcrImage"
                return [exitcode: 1, message: "failed to tag ${service} with tag ${tag}"]
            }
        }
        exitcode = shell.execForStatus("docker push ${ecrServiceRepository}")
        echo.exit "AWSApi::tagAndPushEcrImage"
        return [exitcode: exitcode, message: "successfully pushed image to ECR for ${service} with tags ${tags}"]
    }

    /**
     * Add tag to an existing image
     * @param environment Build environment
     * @param service ECS service
     * @param currentTag existing tag for image
     * @param newTag new tag for image
     * @return Map of a result[exitcode, message]
    */
    def reTagEcrImage(String environment, String service, String currentTag, String newTag) {
        echo.enter "AWSApi::reTagEcrImage"
        int exitcode = shell.execForStatus("""
            MANIFEST=`aws --profile ${environment} ecr batch-get-image --repository-name ${service} --image-ids imageTag=${currentTag}  --query images[].imageManifest --output text`
            aws --profile ${environment} ecr put-image --repository-name ${service} --image-tag ${newTag} --image-manifest "\$MANIFEST"
        """)
        if(exitcode != 0) {
            echo.exit "AWSApi::reTagEcrImage"
            return [exitcode: exitcode, message: "failed to retag ECR image for service ${service} and tag ${currentTag}"]
        }
        echo.exit "AWSApi::deleteEcrImage"
        return [exitcode: exitcode, message: "successfully retagged ECR image for service ${service} with tag ${newTag}"]
    }

    /**
     * Find if severity levels exist from image scan
     * @param environment Build environment
     * @param service ECS service
     * @param severityLevels List of severity levels to find
     * @return Map of matching severity level and count
     */
    Map findEcrImageScanSeverity(String environment, String service, List<String> severityLevels=["CRITICAL"]) {
        echo.enter "AWSApi::checkEcrImageScan"
        boolean scanComplete = false
        def json
        int currentStatusCheckAttempts = 0
        while (!scanComplete && currentStatusCheckAttempts < maxScanStatusCheckAttempts) {
            currentStatusCheckAttempts++
            echo.info "checking image scan status"
            String stdout = shell.exec("""
                aws --profile ${environment} ecr describe-images --repository-name ${service} --query "sort_by(imageDetails,& imagePushedAt)[-1]" 
            """)
            json = new JsonSlurperClassic().parseText(stdout)
            if(json["imageScanStatus"]) {
                if(json["imageScanStatus"]["status"] == "COMPLETE") {
                    scanComplete = true
                    echo.info "image scan completed"
                } else {
                    echo.info "waiting ${scanWaitTime} seconds for image scan to complete"
                    ctx.sleep scanWaitTime
                }
            } else {
                echo.info "image scan status not found"
                scanComplete = true
            }
        }

        Map severities = [:]
        if(json && json["imageScanFindingsSummary"]) {
            def imageScanSeverityCounts = json["imageScanFindingsSummary"]["findingSeverityCounts"]
            for(level in severityLevels) {
                String levelUpperCase = level.toUpperCase()
                if(imageScanSeverityCounts.containsKey(levelUpperCase)) {
                    severities[levelUpperCase] = imageScanSeverityCounts[levelUpperCase]
                }
            }
        }
        echo.exit "AWSApi::checkEcrImageScan"
        return severities
    }

     /**
     * Fetch secrets in plain text from Secrets Manager
     * @param secretArn
     * @return Map containing secret in plain text
    */
    Map findPlainTextSecretFromSecretsManager(String secretArn, String environment='dev') {
        echo.enter "AWSApi::findPlainTextSecretFromSecretsManager"
        def stdout = shell.exec("""
            set +x
            aws --profile ${environment} secretsmanager get-secret-value --secret-id ${secretArn}
            set -x
        """, true)
        def json = new JsonSlurperClassic().parseText(stdout)
        def secret = json['SecretString']
        if(!secret) {
            return [exitcode: VwRef.EXITCODE_FAILURE_FIND_ERR, message: "Failed to find secret for id ${secretArn}"]
        }
        echo.exit "AWSApi::findPlainTextSecretFromSecretsManager"
        return [exitcode: 0, secret : secret]
    }
}
